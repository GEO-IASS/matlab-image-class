#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\use_default_options true
\maintain_unincluded_children false
\language french
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Une classe Image pour Matlab
\end_layout

\begin_layout Author
D.
 Legland
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Description d'une classe 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

 qui a pour but de faciliter la manipulation des images sous Matlab.
 En particulier, les informations de type, de dimension spatiale sont stockées
 dans la classe.
 Il est aussi possible de stocker des informations de calibration spatiale
 à l'image, ce qui facilite l'affichage des images acquises avec des résolutions
 différentes.
 Ce document décrit la structure interne de la classe et les choix de conception.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Points à rajouter quelque part :
\end_layout

\begin_layout Itemize
gestion de la séparabilité éventuelle des filtres
\end_layout

\begin_layout Itemize
gérer le clonage
\end_layout

\begin_deeper
\begin_layout Itemize
quand on clone une image, doit-on cloner aussi le tampon -> a priori oui...
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
vocabulaire : comment appeler les images de vecteurs ? images spectrales
 ?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La plateforme Matlab est très performante pour traiter les images, mais
 manque parfois de souplesse pour manipuler les données.
 En particulier :
\end_layout

\begin_layout Itemize
les dimensions 1, 2 et 3 correspondent respectivement aux coordonnées y,
 x, et z, ce qui est peu intuitif et pénible pour les conversions
\end_layout

\begin_layout Itemize
pour les images couleur, la couleur est gérée comme une dimension, ce qui
 rend la manipulation des pixels laborieuse, surtout pour les images 3D
 (indexées en y, x, c, et z)
\end_layout

\begin_layout Itemize
pas de gestion de la résolution des images, ce qui vite pénible en 3D où
 la résolution est souvent différente pour l'axe z
\end_layout

\begin_layout Itemize
pas de gestion des meta-données
\end_layout

\begin_layout Itemize
l'indexation des pixels à partir de 1 n'est pas très heureuse, notamment
 pour les conversions de coordonnées
\end_layout

\begin_layout Itemize
les transformations géométriques d'images ne sont pas intuitives, et semblent
 difficile à étendre au 3D ou à d'autres types de transformations
\end_layout

\begin_layout Standard
Ce document présente une classe 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

 qui a pour but de simplifier la manipulation des images matricielles sous
 Matlab.
 Les objets qui instancient cette classe sont manipulés par référence, au
 contraire des tableaux ou structure de données, ce qui permet de limiter
 la consommation mémoire.
\end_layout

\begin_layout Standard
La section suivante commence par faire l'inventaire des images rencontrées
 couramment.
 La section suivante présente la structure de la classe, c'est à dire les
 champs de classes.
 Les sections suivante présentent les fonctions permettant la création,
 et la manipulation des objets de type 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Section
Nature des images
\end_layout

\begin_layout Standard
On se restreint pour le moment aux images matricielles.
 Chaque image est donc représentée par un tableau rectangulaire de plusieurs
 dimensions.
 Les dimensions du tableau pouvant représenter des dimensions spatiales,
 ou autres (longueur d'onde, temps...).
\end_layout

\begin_layout Standard
Les images autres que matricielles qui pourraient être traitées dans un
 deuxième temps :
\end_layout

\begin_layout Itemize
vectorielles (ensemble de primitives géométriques)
\end_layout

\begin_layout Itemize
piles d'images, avec rotations différentes pour chaque pile
\end_layout

\begin_layout Subsection
Dimension
\end_layout

\begin_layout Standard
Les images les plus typiques sont des images 2D.
 On manipule régulièrement des images 3D.
 Le canal (couleur, ou spectral) peut être vu comme une dimension additionnelle.
 On peut avoir à manipuler des images en fonction du temps, ce qui rajoute
 une dimension.
 Idéalement il faudrait aussi inclure les images 1D afin d'être complet.
\end_layout

\begin_layout Standard
On se limite donc aux images de dimension 5, avec les dimensions correspondant
 aux coordonnées x, y, z, canal, et temps respectivement.
 
\end_layout

\begin_layout Standard
Notons qu'il est possible ainsi de représenter des coupes 2D tout en gardant
 le positionnement de la coupe dans l'espace 3D.
\end_layout

\begin_layout Subsection
Types de pixels
\end_layout

\begin_layout Standard
Le type de pixel peut varier.
 On a d'une part des données scalaires :
\end_layout

\begin_layout Itemize
binaire
\end_layout

\begin_layout Itemize
niveaux de gris, codés sur 8, 12, 16...
 bits
\end_layout

\begin_layout Itemize
intensités, stockées sur des flottants en simple ou double précision
\end_layout

\begin_layout Itemize
labels, stockés en général en 16 bits
\end_layout

\begin_layout Itemize
autre : une carte d'orientation, une valeur de périmètre...
 -> peut être codé avec un type double.
\end_layout

\begin_layout Standard
On manipule aussi couramment des pixels représentés non plus par une, mais
 par un ensemble de valeurs :
\end_layout

\begin_layout Itemize
complexe, par exemple pour le résultat d'une transformation de Fourier
\end_layout

\begin_layout Itemize
couleur (RGB, HSV...)
\end_layout

\begin_layout Itemize
spectral
\end_layout

\begin_layout Standard
Pour certains cas, on peut même penser à des types composites.
 Par exemple, les modes HSV représentent 3 bandes qui n'ont pas les mêmes
 ordres de grandeur.
\end_layout

\begin_layout Subsection
Calibration spatiale
\end_layout

\begin_layout Standard
On distingue deux types de référencement des coordonnées des pixels :
\end_layout

\begin_layout Itemize
soit les pixels sont stockées sur les sommets d'une grille : cela a l'avantage
 d'avoir des coordonnées entières pour les pixels, et donc de faciliter
 leur repérage (ex : si on dessine un point en coordonnées (3,5), il sera
 situé au centre du pixel correspondant)
\end_layout

\begin_layout Itemize
soit on considère que les pixels sont situés au centre d'un carré ou cube.
 L'avantage est que l'affichage est plus simple à gérer (un côté de carré
 zoom*zoom).
 Re-échantillonner les images est peut-être aussi plus simple.
\end_layout

\begin_layout Standard
Pour la calibration spatiale, l'approche dans le logiciel ITK est d'intégrer
 les informations à la structure de données image.
 Idée à garder a priori.
 
\end_layout

\begin_layout Standard
Les deux infos à garder absolument :
\end_layout

\begin_layout Itemize
la taille du pixel dans chaque dimension
\end_layout

\begin_layout Itemize
la position du premier pixel 
\end_layout

\begin_layout Standard
Ces deux informations sont en unité métrique, et correspondent à un tableau
 1D avec autant d'éléments que le nombre de dimensions spatiales de l'image.
\end_layout

\begin_layout Standard
Pour l'orientation, des outils comme ITK passent par la matrice des cosinus.
 A voir pour une version ultérieure.
 On peut aussi imaginer un offset : l'origine ne correspond pas au pixel
 d'indice (0,0), mais à un autre (le pixel central, un autre coin...).
\end_layout

\begin_layout Subsection
Information de visualisation
\end_layout

\begin_layout Standard
En gros, comment représenter les pixels de l'image.
 Il s'agit d'une application qui à une valeur de l'image (NDG, double, complexe...)
 associe une valeur d'affichage (en niveaux de gris ou en couleurs RGB).
 La transcription dépend du type d'image.
\end_layout

\begin_layout Standard
Pour une image en niveaux de gris, plusieurs paramètres peuvent être pris
 en compte :
\end_layout

\begin_layout Itemize
une valeur de gamma
\end_layout

\begin_layout Itemize
une fonctions linéaire (brillance + contraste, cf.
 ImageJ)
\end_layout

\begin_layout Itemize
la palette de couleur utilisée, si l'image est indexée
\end_layout

\begin_layout Standard
Pour une image d'intensité affichée en niveaux de gris, on doit en général
 spécifier la dynamique d'affichage (min et max), ce qui permet de recalibrer
 l'affichage pour des valeurs entre 0 et 255.
\end_layout

\begin_layout Standard
Pour une image multivariée (spectre, complexe, couleur...), on peut passer
 par une fonction qui détermine la couleur d'affichage en fonction d'un
 vecteur.
 Par exemple, on peut afficher le module d'un nombre complexe.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Par classes ?
\end_layout

\begin_layout Itemize
Renderer avec methode render(data)
\end_layout

\begin_deeper
\begin_layout Itemize
PaletteRenderer qui à un NDG associe une couleur -> méthode getRenderColor(NDG)
\end_layout

\begin_layout Itemize
IntensityRenderer qui à une intensité associe un NDG ou un RGB -> méthode
 getRenderColor(double)
\end_layout

\begin_layout Itemize
ComplexRenderer -> méthode getRenderColor(cplx)
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Subsection
Meta-données
\end_layout

\begin_layout Standard
Quelques infos qu'il est parfois bon d'avoir sous la main :
\end_layout

\begin_layout Itemize
nom du fichier
\end_layout

\begin_layout Itemize
nom de l'image
\end_layout

\begin_layout Itemize
min et max des valeurs des pixels (pour images scalaires)
\end_layout

\begin_layout Itemize
résolution, pour avoir une correspondance entre coord pixels et coord physiques.
\end_layout

\begin_layout Itemize
nom des axes
\end_layout

\begin_layout Itemize
unité de la valeur des pixels
\end_layout

\begin_layout Standard
Matlab utilise une fonction spéciale pour lire les infos d'un fichier et
 stocke le résultat dans une structure.
\end_layout

\begin_layout Section
Champs de classe
\end_layout

\begin_layout Standard
On présente ici les différents champs de la classe Image, en les regroupant
 par thème.
 Ces différents champs sont supposés être initialisés lors de la construction
 de l'objet image, et ne devraient pas être modifiable a priori.
\end_layout

\begin_layout Subsection
Données brutes
\end_layout

\begin_layout Description
data le tableau de données de l'image.
 Pour éviter les changements d'index de matlab, l'idée est de stocker l'image
 telle que les dimensions correspondent dans l'ordre à x, y, et éventuellement
 z.
 Pour des images multivariées (tensorielles), on rajoute une dimension,
 à la fin.
 Pour des images temporelles, on rajoute encore une dimension.
 On traite donc un tableau de dimension 5, ce qui permet de gérer la majorité
 des cas possibles.
\end_layout

\begin_layout Description
dataSize la dimension totale de l'image.
 Il est nécessaire de le stocker pour éviter les problèmes de dimensionnement.
 Il s'agit d'un vecteur ligne de 5 colonnes.
\end_layout

\begin_layout Description
dimension le nombre de dimensions physiques de l'image (permet de faire
 la différence entre une image 2D et une image 3D avec un seul plan...)
\end_layout

\begin_layout Subsection
Informations sur l'image
\end_layout

\begin_layout Description
name le nom de l'image, typiquement celui du fichier utilisé pour la charger
\end_layout

\begin_layout Description
type le type d'image, c'est à dire la manière d'interpréter le ou les canaux
 de l'image.
 Peut prendre une des valeurs suivantes : 'binary', 'grayscale', 'intensity',
 'label', 'color', 'vector', 'complex', 'unknown'.
\end_layout

\begin_layout Description
channelNames le nom de chaque canal (utile surtout pour les images multi-canaux).
 Peut être vide, ou un tableau de chaînes.
 Ex : {'intensity'}, {'distance'}, {'red', 'green', 'blue'}, {'real', 'imaginary
'}...
\end_layout

\begin_layout Description
\begin_inset Note Note
status open

\begin_layout Plain Layout
espace de couleur dans le cas d'une image couleur
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Calibration spatiale
\end_layout

\begin_layout Standard
On a ensuite des informations de calibration spatiale, un ensemble de données
 permettant le passage entre les coordonnées physique et l'index
\end_layout

\begin_layout Description
origin les coordonnées physique du premier pixel de l'image.
 Stocké dans un vecteur ligne de 
\begin_inset Formula $d$
\end_inset

 éléments.
\end_layout

\begin_layout Description
spacing l'espacement, en unités physique, entre deux éléments successifs.
 Stocké dans un vecteur ligne de 
\begin_inset Formula $d$
\end_inset

 éléments.
\end_layout

\begin_layout Description
unitName le nom de l'unité physique, stocké dans une chaîne de caractères.
 Exemples : 
\begin_inset Quotes fld
\end_inset

microns
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

millimètres
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

nm
\begin_inset Quotes frd
\end_inset

...)
\end_layout

\begin_layout Description
calibrated indicateur booléen qui est mis à VRAI si la calibration doit
 être prise en compte.
\end_layout

\begin_layout Subsection
Orientation
\end_layout

\begin_layout Standard
Toujours concernant la calibration spatiale, on stocke des informations
 sur la manière de s'orienter dans l'image.
 
\end_layout

\begin_layout Description
axisNames le nom de chacun des axes.
\end_layout

\begin_layout Description
(?)anatomicalOrientation un code de trois lettres décrivant l'orientation
 anatomique de l'objet représenté dans l'image.
\end_layout

\begin_layout Description
\begin_inset Note Note
status open

\begin_layout Subsection
Meta-données
\end_layout

\begin_layout Plain Layout
Enfin, on aime garder quelques meta-informations
\end_layout

\begin_layout Description
infos une structure de données contenant le nom de l'image, son fichier
 d'origine, l'auteur, la date de prise de vue...
\end_layout

\end_inset


\end_layout

\begin_layout Section
Création des images
\end_layout

\begin_layout Standard
La bibliothèque permet de créer des images à partir d'un tableau contenant
 les données, de charger l'image contenue dans un fichier, ou de créer des
 images en combinant des images déjà en mémoire.
 
\end_layout

\begin_layout Subsection
Constructeur Image
\end_layout

\begin_layout Standard
Pour le moment, ce constructeur est protégé.
 La création d'une image se fait donc via une des différentes méthodes statiques.
 Ceci permet normalement de faciliter les modifications en cas de changement
 des implémentations.
\end_layout

\begin_layout Subsection
Création à partir de tableaux
\end_layout

\begin_layout Standard
La classe Image définit une méthode statique 
\begin_inset Quotes fld
\end_inset

create
\begin_inset Quotes frd
\end_inset

, qui crée un objet Image à partir d'un tableau Matlab.
 Cette fonction déduit la taille, la dimension, et le type de l'image en
 fonction de la taille du tableau de données.
 
\end_layout

\begin_layout Subsection
Lecture depuis un fichier
\end_layout

\begin_layout Standard
Une fonction statique 
\begin_inset Quotes fld
\end_inset

read
\begin_inset Quotes frd
\end_inset

.
 
\end_layout

\begin_layout Standard
Question : comment gérer l'ajout de formats de fichiers ?
\end_layout

\begin_layout Subsection
Création d'une image couleur
\end_layout

\begin_layout Standard
Une fonction createRGB, à laquelle on passe de 1 à 3 arguments, et qui renvoie
 l'image RGB correspondante.
\end_layout

\begin_layout Section
Manipulation des images
\end_layout

\begin_layout Standard
On a besoin d'opérations de base pour accéder aux valeurs des pixels, éventuelle
ment les modifier, et connaître les informations générales de l'image (taille,
 nature des éléments...).
 On aimerait aussi avoir des fonctions qui se comportent de la même manière
 quelle que soit la dimension (moyenne, min, max...
 de l'image).
\end_layout

\begin_layout Subsection
Taille de l'image
\end_layout

\begin_layout Standard
Fonctions de base pour connaître l'image.
\end_layout

\begin_layout Description
size
\end_layout

\begin_layout Standard
Renvoie la taille de l'image, dans un vecteur ligne dont la longueur est
 égale à la dimension de l'image.
\end_layout

\begin_layout Description
dim
\end_layout

\begin_layout Standard
Renvoie le nombre de dimensions -> reprendre ndims qui est casse-pieds pour
 les tableaux 1D.
 partir sur outerDimension ?
\end_layout

\begin_layout Description
innerDimension
\begin_inset space ~
\end_inset

(innerDim)
\end_layout

\begin_layout Standard
Renvoie le nombre de coordonnées pour lesquelles on a plus de 1 coupes.
\end_layout

\begin_layout Description
outerDimension
\begin_inset space ~
\end_inset

(outerDim)
\end_layout

\begin_layout Standard
Renvoie la dimension dans laquelle est inclue l'image.
 Est supérieur ou égal à la innerDimension.
\end_layout

\begin_layout Subsection
Accès et modification des valeurs de l'image
\end_layout

\begin_layout Subsubsection
Utilisation de l'indexage direct
\end_layout

\begin_layout Standard
Les fonctions subsref et sunsasgn ont été surchargées, ce qui permet un
 accés direct (en lecture et en écriture) aux valeurs de l'image.
\end_layout

\begin_layout Standard
Permet : 
\end_layout

\begin_layout Itemize
renvoyer la valeur d'un pixel à une position donnée
\end_layout

\begin_layout Itemize
crop image en spécifiant une plage.
 
\end_layout

\begin_layout Subsubsection
Utilisation de fonctions d'accès
\end_layout

\begin_layout Description
pixel
\end_layout

\begin_layout Standard
Renvoie un pixel, ou un ensemble de pixels, sous la forme d'un scalaire,
 ou d'un tableau à plusieurs dimensions.
\end_layout

\begin_layout Description
subImage
\end_layout

\begin_layout Standard
Extrait une sous-image, soit de même dimension, soit de dimension réduite.
 Le résultat est encore un objet image.
\end_layout

\begin_layout Subsubsection
Statistiques de base
\end_layout

\begin_layout Standard
Ces fonctions renvoient des valeurs calculées sur l'ensemble des pixels
 de l'image.
 Elle s'appliquent à des images scalaires, ou vectorielles.
\end_layout

\begin_layout Description
mean renvoie la valeur moyenne
\end_layout

\begin_layout Description
min renvoie la valeur minimum
\end_layout

\begin_layout Description
max renvoie la valeur maximum
\end_layout

\begin_layout Description
median renvoie la valeur médiane
\end_layout

\begin_layout Description
var renvoie la variance des valeurs
\end_layout

\begin_layout Description
std renvoie l'écart-type des valeurs de l'image
\end_layout

\begin_layout Subsubsection
Opération arithmétiques sur l'ensemble des pixels
\end_layout

\begin_layout Description
plus ajoute une constante à chaque pixel
\end_layout

\begin_layout Description
minus enlève une constante à chaque pixel
\end_layout

\begin_layout Description
times multiplie chaque pixel par une constante
\end_layout

\begin_layout Description
divide divise chaque pixel par une constante
\end_layout

\begin_layout Subsubsection
Opérations entre deux images
\end_layout

\begin_layout Description
plus additionne les valeurs des pixels de deux images, qui doivent avoir
 des pixels de même type
\end_layout

\begin_layout Description
minus soustrait les valeurs les pixels de deux images, qui doivent avoir
 des pixels de même type
\end_layout

\begin_layout Subsection
Calibration spatiale
\end_layout

\begin_layout Standard
Il nous faut quelques méthodes de conversion entre les deux systèmes de
 coordonnées utilisés :
\end_layout

\begin_layout Itemize
le système des indices, entre 1 et le nombre d'éléments dans la direction
 correspondante (on garde la convention Matlab)
\end_layout

\begin_layout Itemize
le système physique, en unité utilisateur, qu'on appelle 
\begin_inset Quotes fld
\end_inset

positions
\begin_inset Quotes frd
\end_inset

.
\end_layout

\begin_layout Standard
On peut imaginer les fonctions suivantes :
\end_layout

\begin_layout Description
getSpacing/setSpacing pour changer l'espacement entre les pixels ou voxels
 
\end_layout

\begin_layout Description
getOrigin/setOrigin pour changer la position spatiale du premier élément
 du tableau
\end_layout

\begin_layout Description
getUnitName pour connaître le nom de l'unité utilisée
\end_layout

\begin_layout Description
pointToIndex conversion entre les coordonnées physiques et les coordonnées
 index 
\end_layout

\begin_layout Description
indexToPoint conversion entre les coordonnées index et les coordonnées physiques
\end_layout

\begin_layout Subsection
Filtrage
\end_layout

\begin_layout Subsubsection
Transformations géométriques basiques
\end_layout

\begin_layout Standard
Modification de la géométrie par rotation, symétries...
\end_layout

\begin_layout Description
flip Renverse une des dimensions
\end_layout

\begin_layout Description
rotate90 Rotation de 90 degrés autour d'un des axes
\end_layout

\begin_layout Subsubsection
Filtrage linéaire
\end_layout

\begin_layout Standard
Plusieurs filtres linéaires ont été repris pour être plus intuitifs.
\end_layout

\begin_layout Description
filter applique un filtre linéaire (appelle imfilter)
\end_layout

\begin_layout Description
gradient calcule le gradient de l'image, et renvoit une image vecteur.
\end_layout

\begin_layout Subsubsection
Filtrage morphologique
\end_layout

\begin_layout Standard
Quelques filtres morphologiques ont été encapsulés.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
voir si on change pas les noms en 
\begin_inset Quotes fld
\end_inset

openFilter
\begin_inset Quotes frd
\end_inset

, 
\begin_inset Quotes fld
\end_inset

closeFilter
\begin_inset Quotes frd
\end_inset

...
 Cela permet (1) de bien marquer que ce sont des filtres, et (2) d'éviter
 la confusion avec des méthodes de gestion de fichiers.
\end_layout

\end_inset


\end_layout

\begin_layout Description
dilate applique une dilatation morphologique (appelle imdilate)
\end_layout

\begin_layout Description
erode applique une érosion morphologique (appelle imerode)
\end_layout

\begin_layout Description
open applique une ouverture morphologique (appelle imopen)
\end_layout

\begin_layout Description
close applique une fermeture morphologique (appelle imclose)
\end_layout

\begin_layout Description
topHat applique filtrage en chapeau haut de forme (appelle imtophat)
\end_layout

\begin_layout Description
bottomHat applique filtrage en chapeau bas de forme (appelle imbottomhat)
\end_layout

\begin_layout Description
watershed calcule une ligne de partage des eaux.
 Plusieurs options peuvent être spécifiées : connexité, marqueurs, dynamique
 pour calculer les marqueurs.
\end_layout

\begin_layout Subsection
Affichage
\end_layout

\begin_layout Standard
On veut pouvoir afficher une image avec différents niveaux de zoom.
 Le centre de chaque pixel est positionné aux coordonnées physiques du pixel.
 
\end_layout

\begin_layout Standard
L'avantage est que l'on a une correspondance assez directe entre les coordonnées
 physiques et le centre des pixels, ce qui est préférable si on veut mixer
 différentes images ou alors des images avec des objets vectoriels (résultats
 de segmentation par exemple).
\end_layout

\begin_layout Standard
Un pixel sera affiché dans un rectangle de coordonnées :
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\prod_{i=0,...,d}\left[x_{i}+o_{i}-\frac{w_{i}}{2};x_{i}+o_{i}+\frac{w_{i}}{2}\right]
\]

\end_inset

où les 
\begin_inset Formula $x_{i}$
\end_inset

 sont les coordonnées du pixel, 
\begin_inset Formula $o_{i}$
\end_inset

 l'origine de la grille, et 
\begin_inset Formula $w_{i}$
\end_inset

 la taille de la grille selon chaque dimension.
\end_layout

\begin_layout Standard
Pour convertir les coordonnées écran en coordonnées pixel, l'opération semble
 un peu plus compliquée que dans le cas d'un pixel dans les mailles de la
 grille, mais reste abordable.
 De plus, sous Matlab on peut déléguer à la gestion des axes.
\end_layout

\begin_layout Section
Chose à rajouter ou en stand-by
\end_layout

\begin_layout Standard
On peut stocker les infos nécessaire pour l'interprétation et l'affichage
 des valeurs
\end_layout

\begin_layout Description
lut/dynamic Pour l'affichage.
 Stocké sous forme d'un tableau de taille 
\begin_inset Formula $2^{G}\times3$
\end_inset

.
\end_layout

\begin_layout Description
minValue,
\begin_inset space ~
\end_inset

maxValue peuvent être utiles pour certains calculs.
 Nécessitent d'être actualisés si on change les valeurs de certains pixels.
 à réfléchir.
\end_layout

\begin_layout Description
getInfos renvoie les meta-données associées à l'image.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
préciser la forme du retour
\end_layout

\end_inset


\end_layout

\end_body
\end_document
