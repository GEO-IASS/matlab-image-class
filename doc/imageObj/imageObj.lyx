#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family sfdefault
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Bibliothèque orientée objet sous Matlab pour le traitement d'images
\end_layout

\begin_layout Author
D.
 Legland
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
Réflexions sur la possibilité de créer une bibliothèque Matlab pour améliorer
 le traitement des images.
 Le but est de tenir compte des images de dimension multiples, de types
 multiples, de la calibration spatiale, et des meta-informations (résolution,
 orientation, nom de fichier...).
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Points à rajouter quelque part :
\end_layout

\begin_layout Itemize
gestion de la séparabilité éventuelle des filtres
\end_layout

\begin_layout Itemize
gérer le clonage
\end_layout

\begin_deeper
\begin_layout Itemize
quand on clone une image, doit-on cloner aussi le tampon -> a priori oui...
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
La plateforme Matlab est très performante pour traiter les images, mais
 manque parfois de souplesse pour manipuler les données.
 En particulier :
\end_layout

\begin_layout Itemize
les dimensions 1, 2 et 3 correspondent respectivement aux coordonnées y,
 x, et z, ce qui est peu intuitif et pénible pour les conversions
\end_layout

\begin_layout Itemize
pour les images couleur, la couleur est gérée comme une dimension, ce qui
 rend la manipulation des pixels laborieuse
\end_layout

\begin_layout Itemize
pas de gestion de la résolution ou des meta-informations des images
\end_layout

\begin_layout Itemize
l'indexation des pixels à partir de 1 n'est pas très heureuse, notamment
 pour les conversions de coordonnées
\end_layout

\begin_layout Itemize
les transformations géométriques d'images ne sont pas intuitives, et semblent
 difficile à étendre au 3D ou à d'autres types de transformations
\end_layout

\begin_layout Standard
L'idée de ce document est d'étudier si la création d'une (ou plusieurs ?)
 classes images permettraient d'améliorer la manipulation des images sous
 Matlab.
\end_layout

\begin_layout Subsection
Wishlist
\end_layout

\begin_layout Standard
Autres éléments de la 
\begin_inset Quotes fld
\end_inset

wish-list
\begin_inset Quotes frd
\end_inset

 :
\end_layout

\begin_layout Itemize
gestion intégrée des ROI
\end_layout

\begin_deeper
\begin_layout Itemize
setROI(...), avec comme arg soit une image binaire, soit un polygone/polyèdre.
 Par défaut, toute l'image.
\end_layout

\end_deeper
\begin_layout Itemize
fonction sum, mean, hist...
 opérant directement sur la totalité des pixels (ou des pixels de la ROI).
\end_layout

\begin_layout Subsection
Terminologie
\end_layout

\begin_layout Description
index vecteur ligne contenant les coordonnées entières d'un pixel selon
 chaque dimension
\end_layout

\begin_layout Description
position vecteur ligne contenant les coordonnées (en virgule flottante)
 d'un point dans l'espace physique
\end_layout

\begin_layout Section
Nature des images
\end_layout

\begin_layout Standard
On se restreint pour le moment aux images matricielles.
 
\end_layout

\begin_layout Standard
Les images autres que matricielles qui pourraient être traitées dans un
 deuxième temps :
\end_layout

\begin_layout Itemize
vectorielles (ensemble de primitives géométriques)
\end_layout

\begin_layout Itemize
piles d'images, avec rotations différentes pour chaque pile
\end_layout

\begin_layout Subsection
Dimension
\end_layout

\begin_layout Standard
Les images les plus typiques sont des images 2D.
 On manipule régulièrement des images 3D, plus rarement des images 4D.
 On peut avoir à manipuler des images en fonction du temps, ce qui rajoute
 une dimension.
 Idéalement il faudrait aussi inclure les images 1D afin d'être complet.
\end_layout

\begin_layout Subsection
Types de pixels
\end_layout

\begin_layout Standard
On veut pouvoir manipuler des images de dimension 2 (classiques), 3 (souvent),
 4 (plus rare), 1 (pour des profils).
 Le type de pixel peut varier.
 On a d'une part des données scalaires :
\end_layout

\begin_layout Itemize
binaire
\end_layout

\begin_layout Itemize
niveaux de gris, codés sur 8, 12, 16...
 bits
\end_layout

\begin_layout Itemize
intensités, stockées sur des flottants en simple ou double précision
\end_layout

\begin_layout Itemize
labels, stockés en général en 16 bits
\end_layout

\begin_layout Itemize
autre : une carte d'orientation, une valeur de périmètre...
 -> peut être codé avec un type double.
\end_layout

\begin_layout Standard
On manipule aussi couramment des pixels représentés non plus par une, mais
 par un ensemble de valeurs :
\end_layout

\begin_layout Itemize
complexe, par exemple pour le résultat d'une transformation de Fourier
\end_layout

\begin_layout Itemize
couleur (RGB, HSV...)
\end_layout

\begin_layout Itemize
spectral
\end_layout

\begin_layout Standard
Pour certains cas, on peut même penser à des types composites.
 Par exemple, les modes HSV représentent 3 bandes qui n'ont pas les mêmes
 ordres de grandeur.
\end_layout

\begin_layout Standard
La solution la plus simple sous Matlab pour gérer les types est de passer
 par la surcharge des opérateurs.
 Par exemple, on peut utiliser une classe Spectrum pour gérer les spectres.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nom de classe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
suffixe image
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
binaire
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Bin
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
niveaux de gris
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gray8, Gray16...
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
G8, G16...
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
intensité (flottant)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Float, Double
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
f, d
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
labels
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lbl
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
angles
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Orientation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ori
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
complexe
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Complex
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cpx
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
couleur RGB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RGB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RGB
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RGB flottant
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RGBFloat
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RGBf
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Suffixe de type d'image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Calibration spatiale
\end_layout

\begin_layout Standard
On distingue deux types de référencement des coordonnées des pixels :
\end_layout

\begin_layout Itemize
soit les pixels sont stockées sur les sommets d'une grille : cela a l'avantage
 d'avoir des coordonnées entières pour les pixels, et donc de faciliter
 leur repérage (ex : si on dessine un point en coordonnées (3,5), il sera
 situé au centre du pixel correspondant)
\end_layout

\begin_layout Itemize
soit on considère que les pixels sont situés au centre d'un carré ou cube.
 L'avantage est que l'affichage est plus simple à gérer (un côté de carré
 zoom*zoom).
 Re-échantillonner les images est peut-être aussi plus simple.
\end_layout

\begin_layout Standard
Pour la calibration spatiale, l'approche dans le logiciel ITK est d'intégrer
 les informations à la structure de données image.
 Idée à garder a priori.
 
\end_layout

\begin_layout Standard
Les deux infos à garder absolument :
\end_layout

\begin_layout Itemize
la taille du pixel dans chaque dimension
\end_layout

\begin_layout Itemize
la position du premier pixel 
\end_layout

\begin_layout Standard
Ces deux informations sont en unité métrique, et correspondent à un tableau
 1D avec autant d'éléments que le nombre de dimensions spatiales de l'image.
\end_layout

\begin_layout Standard
Pour l'orientation, des outils comme ITK passent par la matrice des cosinus.
 A voir pour une version ultérieure.
 On peut aussi imaginer un offset : l'origine ne correspond pas au pixel
 d'indice (0,0), mais à un autre (le pixel central, un autre coin...).
\end_layout

\begin_layout Subsection
Information de visualisation
\end_layout

\begin_layout Standard
En gros, comment représenter les pixels de l'image.
 Il s'agit d'une application qui à une valeur de l'image (NDG, double, complexe...)
 associe une valeur d'affichage (NDG ou RGB).Cela comprend :
\end_layout

\begin_layout Itemize
pour une image en NDG :
\end_layout

\begin_deeper
\begin_layout Itemize
une valeur de gamma
\end_layout

\begin_layout Itemize
une fonctions linéaire (brillance + contraste, cf.
 ImageJ)
\end_layout

\begin_layout Itemize
la palette de couleur utilisée, si l'image est indexée
\end_layout

\end_deeper
\begin_layout Itemize
pour une image d'intensité affichée en niveaux de gris, la dynamique d'affichage
 (min et max)
\end_layout

\begin_layout Itemize
pour une image multivariée (spectre, complexe, couleur...), une fonction qui
 détermine la couleur d'affichage en fonction d'un vecteur.
 Par exemple, on peut afficher le module d'un nombre complexe.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Par classes ?
\end_layout

\begin_layout Itemize
Renderer avec methode render(data)
\end_layout

\begin_deeper
\begin_layout Itemize
PaletteRenderer qui à un NDG associe une couleur -> méthode getRenderColor(NDG)
\end_layout

\begin_layout Itemize
IntensityRenderer qui à une intensité associe un NDG ou un RGB -> méthode
 getRenderColor(double)
\end_layout

\begin_layout Itemize
ComplexRenderer -> méthode getRenderColor(cplx)
\end_layout

\end_deeper
\end_inset


\end_layout

\begin_layout Subsection
Meta-données
\end_layout

\begin_layout Standard
Quelques infos qu'il est parfois bon d'avoir sous la main :
\end_layout

\begin_layout Itemize
nom du fichier
\end_layout

\begin_layout Itemize
nom de l'image
\end_layout

\begin_layout Itemize
min et max des valeurs des pixels (pour images scalaires)
\end_layout

\begin_layout Itemize
résolution, pour avoir une correspondance entre coord pixels et coord physiques.
\end_layout

\begin_layout Itemize
nom des axes
\end_layout

\begin_layout Itemize
unité de la valeur des pixels
\end_layout

\begin_layout Standard
Matlab utilise une fonction spéciale pour lire les infos d'un fichier et
 stocke le résultat dans une structure.
\end_layout

\begin_layout Section
Opérations souhaitées
\end_layout

\begin_layout Standard
On a besoin d'opérations de base pour accéder aux valeurs des pixels, éventuelle
ment les modifier, et connaître les informations générales de l'image (taille,
 nature des éléments...).
 On aimerait aussi avoir des fonctions qui se comportent de la même manière
 quelle que soit la dimension (moyenne, min, max...
 de l'image).
\end_layout

\begin_layout Subsection
Taille de l'image
\end_layout

\begin_layout Standard
Fonctions de base pour connaître l'image.
\end_layout

\begin_layout Description
size
\end_layout

\begin_layout Standard
Renvoie la taille de l'image, dans un vecteur ligne dont la longueur est
 égale à la dimension de l'image.
\end_layout

\begin_layout Description
dim
\end_layout

\begin_layout Standard
Renvoie le nombre de dimensions -> reprendre ndims qui est casse-pieds pour
 les tableaux 1D.
 partir sur outerDimension ?
\end_layout

\begin_layout Description
innerDimension
\begin_inset space ~
\end_inset

(innerDim)
\end_layout

\begin_layout Standard
Renvoie le nombre de coordonnées pour lesquelles on a plus de 1 coupes.
\end_layout

\begin_layout Description
outerDimension
\begin_inset space ~
\end_inset

(outerDim)
\end_layout

\begin_layout Standard
Renvoie la dimension dans laquelle est inclue l'image.
 Est supérieur ou égal à la innerDimension.
\end_layout

\begin_layout Subsection
Accès et modification des valeurs de l'image
\end_layout

\begin_layout Description
pixel
\end_layout

\begin_layout Standard
Renvoie un pixel, ou un ensemble de pixels, sous la forme d'un scalaire,
 ou d'un tableau à plusieurs dimensions.
\end_layout

\begin_layout Description
subImage
\end_layout

\begin_layout Standard
Extrait une sous-image, soit de même dimension, soit de dimension réduite.
 Le résultat est encore un objet image.
\end_layout

\begin_layout Subsubsection
Utilisation de subsref ?
\end_layout

\begin_layout Standard
Permet : 
\end_layout

\begin_layout Itemize
renvoyer la valeur d'un pixel à une position donnée
\end_layout

\begin_layout Itemize
crop image en spécifiant une plage.
 
\end_layout

\begin_layout Subsubsection
Itérateurs sur pixels ?
\end_layout

\begin_layout Standard
Il serait pratique d'avoir une fonction pour itérer sur les pixels de l'image.
 Voir si gérable en pratique avec Matlab.
\end_layout

\begin_layout Standard
Principe :
\end_layout

\begin_layout Itemize
une classe Iterator
\end_layout

\begin_layout Standard
En fait, si le gain est intéressant en C++ via la gestion de pointeur, le
 gain semble négligeable sous Matlab.
\end_layout

\begin_layout Subsubsection
Statistiques de base
\end_layout

\begin_layout Standard
Ces fonctions renvoient des valeurs calculées sur l'ensemble des pixels
 de l'image.
 Elle s'appliquent à des images scalaires, ou vectorielles.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Idéalement, il devrait s'agir de l'ensemble des pixels dans la région d'intérêt
\end_layout

\end_inset


\end_layout

\begin_layout Description
mean renvoie la valeur moyenne
\end_layout

\begin_layout Description
min renvoie la valeur minimum
\end_layout

\begin_layout Description
max renvoie la valeur maximum
\end_layout

\begin_layout Description
median renvoie la valeur médiane
\end_layout

\begin_layout Description
var renvoie la variance des valeurs
\end_layout

\begin_layout Description
std renvoie l'écart-type des valeurs de l'image
\end_layout

\begin_layout Subsubsection
Opération arithmétiques sur l'ensemble des pixels
\end_layout

\begin_layout Description
plus ajoute une constante à chaque pixel
\end_layout

\begin_layout Description
minus enlève une constante à chaque pixel
\end_layout

\begin_layout Description
times multiplie chaque pixel par une constante
\end_layout

\begin_layout Description
divide divise chaque pixel par une constante
\end_layout

\begin_layout Subsubsection
Opérations entre deux images
\end_layout

\begin_layout Description
plus additionne les valeurs des pixels de deux images, qui doivent avoir
 des pixels de même type
\end_layout

\begin_layout Description
minus soustrait les valeurs les pixels de deux images, qui doivent avoir
 des pixels de même type
\end_layout

\begin_layout Subsection
Calibration spatiale
\end_layout

\begin_layout Standard
Il nous faut quelques méthodes de conversion entre les deux systèmes de
 coordonnées utilisés :
\end_layout

\begin_layout Itemize
le système des indices, entre 0 et le nombre d'éléments dans la direction
 correspondante
\end_layout

\begin_layout Itemize
le système physique, en unité utilisateur
\end_layout

\begin_layout Standard
On peut imaginer les fonctions suivantes :
\end_layout

\begin_layout Description
getSpacing/setSpacing pour changer l'espacement entre les pixels ou voxels
 
\end_layout

\begin_layout Description
getOrigin/setOrigin pour changer la position spatiale du premier élément
 du tableau
\end_layout

\begin_layout Description
getUnitName pour connaître le nom de l'unité utilisée
\end_layout

\begin_layout Description
pointToIndex conversion entre les coordonnées physiques et les coordonnées
 index 
\end_layout

\begin_layout Description
indexToPoint conversion entre les coordonnées index et les coordonnées physiques
\end_layout

\begin_layout Subsection
Filtrage
\end_layout

\begin_layout Subsubsection
Transformations géométriques basiques
\end_layout

\begin_layout Standard
Modification de la géométrie par rotation, symétries...
\end_layout

\begin_layout Description
flip
\end_layout

\begin_layout Standard
Renverse une des dimensions
\end_layout

\begin_layout Description
rotate90
\end_layout

\begin_layout Standard
Rotation de 90 degrés autour d'un des axes
\end_layout

\begin_layout Subsection
Affichage
\end_layout

\begin_layout Standard
On veut pouvoir afficher une image avec différents niveaux de zoom.
 Choix entre 2 possibilités.
\end_layout

\begin_layout Subsubsection
Pixels entre les bornes
\end_layout

\begin_layout Standard
Pour chaque pixel, on affiche un rectangle de la couleur du pixel entre
 les coordonnées 
\begin_inset Formula $(i,j)$
\end_inset

 et 
\begin_inset Formula $(i+1,j+1)$
\end_inset

.
 Méthode classique de représentation des images sur écran matriciel.
\end_layout

\begin_layout Standard
L'avantage est que le coin supérieur de l'image est situé aux coordonnées
 
\begin_inset Formula $(0,0)$
\end_inset

, et que l'image occupe à l'écran un rectangle dont la position se calcule
 facilement : 
\begin_inset Formula $[0;M_{i}]\cdot zoom$
\end_inset

, où 
\begin_inset Formula $M_{i}$
\end_inset

 est le nombre de pixels dans la dimension 
\begin_inset Formula $i$
\end_inset

.
 
\end_layout

\begin_layout Standard
Pour convertir les coordonnées écran en coordonnées pixel, il suffit de
 tronquer, après avoir divisé par le facteur de zoom.
\end_layout

\begin_layout Subsubsection
Pixel centré sur les bornes
\end_layout

\begin_layout Standard
L'idée est de positionner le centre de chaque pixel aux coordonnées physiques
 du pixel.
 C'est ce qui est utilisé dans ITK.
\end_layout

\begin_layout Standard
L'avantage est que l'on a une meilleure correspondance entre les coordonnées
 physiques et le centre des pixels, ce qui est préférable si on veut mixer
 différentes images ou alors des images avec des objets vectoriels (résultats
 de segmentation par exemple).
\end_layout

\begin_layout Standard
Un pixel sera affiché dans un rectangle de coordonnées :
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\prod_{i=0,...,d}\left[x_{i}+o_{i}-\frac{w_{i}}{2};x_{i}+o_{i}+\frac{w_{i}}{2}\right]\]

\end_inset

où les 
\begin_inset Formula $x_{i}$
\end_inset

 sont les coordonnées du pixel, 
\begin_inset Formula $o_{i}$
\end_inset

 l'origine de la grille, et 
\begin_inset Formula $w_{i}$
\end_inset

 la taille de la grille selon chaque dimension.
\end_layout

\begin_layout Standard
Pour convertir les coordonnées écran en coordonnées pixel, l'opération semble
 un peu plus compliquée que dans le cas d'un pixel dans les mailles de la
 grille, mais reste abordable.
 De plus, sous Matlab on peut déléguer à la gestion des axes.
\end_layout

\begin_layout Subsubsection
Conclusion
\end_layout

\begin_layout Standard
Il vaut mieux choisir des pixels centrés sur la grille.
\end_layout

\begin_layout Section
Réflexions sur la conception
\end_layout

\begin_layout Subsection
Multiplicité des images
\end_layout

\begin_layout Standard
On a besoin de jongler entre des images qui diffèrent principalement selon
 :
\end_layout

\begin_layout Itemize
le type de données utilisées
\end_layout

\begin_layout Itemize
la dimension
\end_layout

\begin_layout Itemize
le type de stockage retenu (un tampon, un ensemble de fichier, une vue d'une
 autre image...)
\end_layout

\begin_layout Standard
Une possibilité est d'avoir une classe unique 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

, qui gère tous les cas.
\end_layout

\begin_layout Standard
Une autre possibilité est de jouer le polymorphisme, et d'avoir une interface
 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

, puis des classes concrètes qui implémentent les méthodes.
 
\end_layout

\begin_layout Standard
Pour le type de données, le plus simple est peut-être tout de même de partir
 sur un nombre restreint de types de bases (cf DIP lib).
\end_layout

\begin_layout Subsection
Types de données
\end_layout

\begin_layout Standard
Selon le type des données stockées, certaines opérations sont possibles
 on non.
\end_layout

\begin_layout Subsubsection
Données scalaires
\end_layout

\begin_layout Itemize
addition, soustraction 
\end_layout

\begin_layout Itemize
multiplication et division par scalaire
\end_layout

\begin_layout Itemize
extraction valeurs min max, moyenne, médianes...
\end_layout

\begin_layout Itemize
calcul histogramme
\end_layout

\begin_layout Itemize
conversion de type
\end_layout

\begin_layout Subsubsection
Niveaux de gris
\end_layout

\begin_layout Standard
Les niveaux de gris sont stockés sur un nombre fini de bits, ce qui quantifie
 les niveaux sur 256, 1024...
 valeurs.
 Après les calculs, il est nécessaire de recalibrer le résultat sur la plage
 de valeurs utile pour éviter les artefacts.
\end_layout

\begin_layout Itemize
addition, soustraction puis recalibrage
\end_layout

\begin_layout Itemize
multiplication et division par scalaire puis recalibrage
\end_layout

\begin_layout Subsubsection
Données vectorielles
\end_layout

\begin_layout Itemize
addition et soustraction vectorielles
\end_layout

\begin_layout Itemize
multiplication par un scalaire
\end_layout

\begin_layout Itemize
extraction d'une composante et stockage dans une image scalaire.
\end_layout

\begin_layout Subsubsection
Données couleur
\end_layout

\begin_layout Itemize
conversion en niveaux de gris
\end_layout

\begin_layout Itemize
conversion vers autre espace couleur
\end_layout

\begin_layout Subsection
Identification des pixels
\end_layout

\begin_layout Standard
On utilise trois types de coordonnées pour identifier les pixels :
\end_layout

\begin_layout Itemize
les coordonnées spatiales calibrées (position)
\end_layout

\begin_layout Itemize
les indices dans chaque axe (index)
\end_layout

\begin_layout Itemize
les indices non arrondis, si on veut interpoler et que l'on cherche les
 voisins (continuous index)
\end_layout

\begin_layout Standard
Dans ITK, ces trois types d'accès sont définis dans la classes ImageFunction.
\end_layout

\begin_layout Standard
Note : si on tient compte de la calibration spatiale, il faut automatiquement
 interpoler.
 Idée : séparer le stockage des pixels (classe image), et l'évaluation à
 des positions données.
\end_layout

\begin_layout Section
Ébauche d'arborescence de classe
\end_layout

\begin_layout Standard
On a le choix entre deux stratégies :
\end_layout

\begin_layout Itemize
une classe 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

 unique, qui gère tout.
\end_layout

\begin_layout Itemize
une arborescence de classes, avec une classe abstraite 
\begin_inset Quotes fld
\end_inset

Image
\begin_inset Quotes frd
\end_inset

 qui définit les opérations communes.
\end_layout

\begin_layout Subsection
Classe Image
\end_layout

\begin_layout Standard
Classe principale, qui sera peut-être complétée par des classes utilitaires
 (LUT, élément structurant...).
 Représente une image matricielle de dimension arbitraire.
\end_layout

\begin_layout Subsubsection
Champs de classe
\end_layout

\begin_layout Description
data Contient le tableau de données de l'image.
\begin_inset Note Note
status open

\begin_layout Plain Layout
autre nom ? candidat : buffer 
\end_layout

\end_inset

 Pour éviter les changements d'index de matlab, l'idée est de stocker l'image
 telle que les dimensions correspondent dans l'ordre à x, y, et éventuellement
 z.
 Pour des images multivariées (tensorielles), on rajoute une dimension,
 à la fin.
 
\end_layout

\begin_layout Description
dataSize La dimension totale de l'image.
 Nécessaire de le stocker pour éviter les problèmes de dimensionnement.
\begin_inset Note Note
status open

\begin_layout Plain Layout
autre nom potentiel : dims.
 
\end_layout

\end_inset


\end_layout

\begin_layout Description
dataType Le type des éléments stockés.
 A voir si on en a vraiment besoin, car peut être obtenu via une méthode
 du type : classname(this.data).
\end_layout

\begin_layout Subsection
Classe Image 
\begin_inset Quotes fld
\end_inset

concrète
\begin_inset Quotes frd
\end_inset


\end_layout

\begin_layout Standard
Supposons qu'on ait une seule classe image.
 Pour incorporer toutes les informations, il faut inclure un certain nombre
 de champs.
\end_layout

\begin_layout Subsubsection
Champs de classe
\end_layout

\begin_layout Standard
On regroupe en fonction du type d'information fournie.
 On a d'abord des données qui concernent le tableau de pixels/voxels :
\end_layout

\begin_layout Description
data Un pointeur vers un tableau de données, ou vers une structure qui permet
 de récupérer un pixel pour un index (en coordonnées entières) donné.
\end_layout

\begin_layout Description
dataSize La taille de l'image en nombre de pixels dans chaque dimension.
 Nécessaire de le stocker pour éviter les problèmes de dimensionnement dus
 à Matlab.
 Stocké dans un vecteur ligne.
 La longueur du vecteur donne le nombre de dimensions de l'image.
\end_layout

\begin_layout Description
dataType le type des données stockées.
 Peut être déduit directement du tableau de données.
\end_layout

\begin_layout Standard
On peut stocker les infos nécessaire pour l'interprétation et l'affichage
 des valeurs
\end_layout

\begin_layout Description
lut/dynamic Pour l'affichage.
 Stocké sous forme de tableau 
\begin_inset Formula $2^{G}\times3$
\end_inset

.
\end_layout

\begin_layout Description
minValue,
\begin_inset space ~
\end_inset

maxValue peuvent être utiles pour certains calculs.
 Nécessitent d'être actualisés si on change les valeurs de certains pixels.
 à réfléchir.
\end_layout

\begin_layout Standard
On a ensuite des informations de calibration spatiale, un ensemble de données
 permettant le passage entre les coordonnées physique et l'index
\end_layout

\begin_layout Description
origin les coordonnées physique du premier pixel de l'image.
 Stocké dans un vecteur ligne de 
\begin_inset Formula $d$
\end_inset

 éléments.
\end_layout

\begin_layout Description
spacing l'espacement, en unités physique, entre deux éléments successifs
\end_layout

\begin_layout Description
unitName le nom de l'unité physique (microns, millimètres, pixels...)
\end_layout

\begin_layout Standard
Enfin, on aime garder quelques meta-informations
\end_layout

\begin_layout Description
infos une structure de données contenant le nom de l'image, son fichier
 d'origine, l'auteur, la date de prise de vue...
\end_layout

\begin_layout Subsubsection
Méthodes
\end_layout

\begin_layout Description
getInfos renvoie les meta-données associées à l'image.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
préciser la forme du retour
\end_layout

\end_inset


\end_layout

\begin_layout Description
getPixel renvoie la valeur du pixel à partir de son index (tableau de coordonnée
s entières indexées à 0)
\end_layout

\begin_layout Description
show affiche l'image dans la fenêtre courante
\end_layout

\begin_layout Subsection
Interpolation
\end_layout

\begin_layout Standard
Un aspect particulièrement développé sous ITK est la gestion des transformations
 et des interpolations d'image.
 Une abstraction comparables consisterait à considérer plusieurs classes.
\end_layout

\begin_layout Subsubsection
EvaluationFunction
\end_layout

\begin_layout Standard
Classe qui permet d'accéder à une valeur en fonction d'une position spatiale.
 
\end_layout

\begin_layout Subsubsection
InterpolatedImage / ImageInterpolator
\end_layout

\begin_layout Standard
Classe qui permet d'évaluer la valeur d'une image en fonction d'une position
 spatiale.
 Il s'agit d'une classe abstraite (ou d'une interface) qui sera spécialisée
 en fonction des méthodes d'interpolation.
\end_layout

\begin_layout Subsubsection
BackTransformedImage
\end_layout

\begin_layout Standard
Classe qui permet d'évaluer la valeur d'une image après avoir transformé
 la position spatiale.
 Contient un pointeur vers une image interpolée, et un pointeur vers la
 transformation.
\end_layout

\begin_layout Subsection
Classe utilitaire Images 
\end_layout

\begin_layout Standard
Une classe pour fournir des méthodes statiques telles que le chargement
 d'une image, ou quelques filtres standards.
\end_layout

\begin_layout Description
read pour charger une image depuis un fichier
\end_layout

\begin_layout Description
write pour sauver les données image dans un ou plusieurs fichiers.
\end_layout

\begin_layout Section
Classe image unique ?
\end_layout

\begin_layout Subsection
Champs de classe
\end_layout

\begin_layout Description
data Contient le tableau de données de l'image.
\begin_inset Note Note
status open

\begin_layout Plain Layout
autre nom ? candidat : buffer 
\end_layout

\end_inset

 Pour éviter les changements d'index de matlab, l'idée est de stocker l'image
 telle que les dimensions correspondent dans l'ordre à x, y, et éventuellement
 z.
 Pour des images multivariées (tensorielles), on rajoute une dimension,
 à la fin.
 
\end_layout

\begin_layout Description
dataSize La dimension totale de l'image.
 Nécessaire de le stocker pour éviter les problèmes de dimensionnement.
\begin_inset Note Note
status open

\begin_layout Plain Layout
autre nom potentiel : dims.
 
\end_layout

\end_inset

 
\end_layout

\begin_layout Description
imageSize la dimension spatiale de l'image, c'est à dire le nombre de pixels
 dans chaque axe représentant une dimension physique
\end_layout

\begin_layout Description
elementSize la taille du tableau représentant chqaue pixel ou voxel.
 Vaut 1 dans le cas d'une image scalaire, N dans le cas d'une image vectorielle,
 avec N étant le nombre de composantes du vecteur.
 On peut aussi imaginer des images où chaque pixel est une matrice (ex :
 matrice d'orientations), mais l'occupation mémoire peut augmenter rapidement.
\end_layout

\begin_layout Description
dataType/elementType Le type des éléments stockés.
 A voir si on en a vraiment besoin, car peut être obtenu via une méthode
 du type : classname(this.data).
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
Pour le moment à l'état de prototype, avec des versions 
\begin_inset Quotes fld
\end_inset

forkées
\begin_inset Quotes frd
\end_inset

 pour tester des implémentations particulières.
\end_layout

\end_body
\end_document
